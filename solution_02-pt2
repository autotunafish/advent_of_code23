/*
Advent of code puzzle 02-pt2
described here: https://github.com/autotunafish/advent_of_code23/blob/main/puzzle_02-pt2

Now, we have to multiply the single maximum value gathered for each color, for each game. 
We'll create a value for each and increment it as the process goes for each larger value.
We'll first read the input as a string. The input is a series of lines and we need to evaluate 
them for a contained color value. We'll go through the line by removing the zeroeth and pushing 
to a wordval, until the \n is reached. During that process of removing zeroeth,  the check on 
the maximum values against the collected string values by matching "blue", "red" or "green". 
They are parsed to be evaluated with >= to their respective previous recorded maximum. Continue 
until \n, multiply the 3 values and add to runsum. Reset all values and loop until the whole 
input string is exhausted, print runsum.

*/

use std::fs;

fn main() {
    let mut runsum = 0;
    let mut rmax = 0;
    let mut gmax = 0;
    let mut bmax = 0;
    let mut wordval = String::new();
    let mut bval = String::new();
    let infile = String::from("input02.txt");
    let mut pz_in = fs::read_to_string(&infile).unwrap();

    loop {
        if pz_in.len() == 0 {
            break;
        }
        let i = pz_in.remove(0);
        let j = i.clone();
        wordval.push(j);

        if wordval.contains("blue") {
            wordval.pop();
            wordval.pop();
            wordval.pop();
            wordval.pop();
            wordval.pop();
            let bugsy = wordval.pop().unwrap();
            let mumbles = wordval.pop().unwrap();
            match bugsy {
                '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' => {
                    let leech = bugsy.clone();
                    bval.insert(0, leech);
                }

                _ => (),
            }
            match mumbles {
                '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' => {
                    let leech = mumbles.clone();
                    bval.insert(0, leech);
                }

                _ => (),
            }

            let bsum = bval.parse::<i32>().unwrap();
            if bsum >= bmax {
                bmax = bsum;
            }
            bval.clear();
        }

        if wordval.contains("red") {
            wordval.pop();
            wordval.pop();
            wordval.pop();
            wordval.pop();
            let bugsy = wordval.pop().unwrap();
            let mumbles = wordval.pop().unwrap();
            match bugsy {
                '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' => {
                    let leech = bugsy.clone();
                    bval.insert(0, leech);
                }

                _ => (),
            }
            match mumbles {
                '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' => {
                    let leech = mumbles.clone();
                    bval.insert(0, leech);
                }

                _ => (),
            }

            let bsum = bval.parse::<i32>().unwrap();
            if bsum >= rmax {
                rmax = bsum;
            }
            bval.clear();
        }

        if wordval.contains("green") {
            wordval.pop();
            wordval.pop();
            wordval.pop();
            wordval.pop();
            wordval.pop();
            wordval.pop();
            let bugsy = wordval.pop().unwrap();
            let mumbles = wordval.pop().unwrap();
            match bugsy {
                '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' => {
                    let leech = bugsy.clone();
                    bval.insert(0, leech);
                }

                _ => (),
            }
            match mumbles {
                '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' => {
                    let leech = mumbles.clone();
                    bval.insert(0, leech);
                }

                _ => (),
            }

            let bsum = bval.parse::<i32>().unwrap();
            if bsum >= gmax {
                gmax = bsum;
            }
            bval.clear();
        }

        if i == '\n' {
            let power = bmax * rmax * gmax;
            runsum += power;
            rmax = 0;
            gmax = 0;
            bmax = 0;
            wordval.clear();
            bval.clear();
        }
        continue;
    }
    println!("{:?}", &runsum);
}
