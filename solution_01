/*

Advent of code puzzle 01
described here: https://github.com/autotunafish/advent_of_code23/blob/main/puzzle_01

We'll read the input as a string, remove the zeroeth element until we match to a number as char. 
Push and store this char into 'hold' and continue remove zeroeth push and store until the \n. 
Then pop last number, push this char to 'hold', parse to int and continue until the line is exhausted. 
Add the integers for the 'runsum'.

*/

use std::fs;

fn main() {
    let mut hold = String::new();
    let mut catval = String::new();
    let mut runsum = 0;
    let infile = String::from("input01.txt");
    let mut pz_in = fs::read_to_string(&infile).unwrap();
    loop {
        if pz_in.len() == 0 {
            break;
        }
        let i = pz_in.remove(0);
        match i {
            '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' => {
                let leech = i.clone();
                hold.push(leech);
            }
            '\n' => {
                let tick = hold.pop().unwrap();
                let mut tock = tick.clone();
                if hold.len() <= 0 {
                    hold.push(tock);
                }
                let flea = hold.remove(0);
                catval.push(flea);
                catval.push(tick);
                let catsum = catval.parse::<i32>().unwrap();
                runsum += catsum;
                hold.clear();
                catval.clear();
            }
            _ => (),
        }
        continue;
    }
    println!("runsum {}", &runsum);
}
